                                                                   GeeksforGeeks
                                                           
The Question is :- "Nine Divisors" the code of the program is :- 
Answer :-

class Solution{   
public:
    vector <long long> listPrime;
    int countNotExceed(long long val, int n) {
        int l = 0, r = n - 1, res = n;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (listPrime[mid] <= val)
                l = mid + 1;
            else {
                r = mid - 1;
                res = mid;
            }
        }
        return res;
    }
    long long int nineDivisors(long long int N) {
        //Code Here
        vector <bool> isPrime(sqrt(N) + 1, true);
        for (int p = 2; p * p <= sqrt(N); p++) {
            if (isPrime[p]) {
                for (int i = p * p; i <= sqrt(N); i += p)
                    isPrime[i] = false;
            }
        }
        for (int i = 2; i <= sqrt(N); i++) {
            if (isPrime[i])
                listPrime.push_back(i * 1LL);
        }
        
        // Number present by p1^2 * p2^2
        int n = listPrime.size();
        long long res = 0;
        for (int i = n - 1; i >= 0; i--) {
            long long notExceedVal = floor(sqrt(N * 1.0) / listPrime[i]);
            res += (countNotExceed(notExceedVal, i) * 1LL);
        }

        // Number present by p^8
        for (int i = 0; i < n; i++) {
            long long square = listPrime[i] * 1LL * listPrime[i];
            if (square * square * square * square <= N)
                res++;
            else
                break;
        }
        return res;
    }
};

Hope you understand the answer, and complete it.
Stay Connected for daily Problem of the Day answers.

Thank you All!
